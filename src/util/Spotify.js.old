const clientId = '18523cfcd8f648a6a94af1b19bdd5182';
const redirectUri = 'http://localhost:3000/';
const clientSecret = '57dfce01b5be487793d7ae3b6858175e';
let accessToken;

const Spotify = {

    getAccessToken() {

        if(accessToken){

            return accessToken;
        } else {
            console.log('Access token is '+accessToken);
        }

    //check for access token matches

        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);
        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);

        if(accessTokenMatch && expiresInMatch){
            
            accessToken = accessTokenMatch[1];
            const expiresIn = Number(expiresInMatch[1]);
            
            // Clear parameters and allow to grab a new access token when it expires.

            window.setTimeout(() => accessToken = '', expiresIn * 1000);
            window.history.pushState('Acess Token', null, '/');
            return accessToken;

        }
            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;
            window.location = accessUrl;
        
        
    },

    search(term){
        const accessToken = Spotify.getAccessToken();
        const endpoint = 'https://api.spotify.com/v1/search?type=track&q=';
        return fetch(endpoint+term, 
                    { headers: { 
                        Authorization: `Bearer ${accessToken}`
                    } 
                }).then(response => {
                    return response.json(); //converts response to jason
                }).then(jsonResponse => { //checks if response is empty, if yes, returns an empty array, if not returns the required object.
                    if(!jsonResponse.traks) {
                        return [];
                    } else {

                        return jsonResponse.traks.items.map(track => ({
                            id: track.id,
                            name: track.name,
                            artist: track.artist[0].name,
                            album: track.album.name,
                            uri: track.uri
                        }));

                    }
                })

    },

    savePlaylist(playlistName, trackURIs){

        if(!playlistName || !trackURIs.length) {
            return;
        } 

        const endpoint = 'https://api.spotify.com/v1/me'; //returns user's Spotify username.
        const accessToken = Spotify.getAccessToken();
        const headers = { Authorization: `Bearer ${accessToken}`};
        let userId;
        
            return fetch(endpoint, { headers: headers } //returns user's Spotify ID
                ).then(response => response.json()
                ).then(jsonResponse => {
                    userId = jsonResponse.id;

                    // fetches playlist with user id and pass the necessary data to fetch (headers, method and body)

                    return fetch(`https://api.spotify.com/v1/${userId}/playlists`,
                    {
                        headers: headers,
                        method: 'POST',
                        body: JSON.stringify({playlistName: playlistName})
                    }).then(response => response.json()
                    ).then(jsonResponse => {
                        const playlistId = jsonResponse.id;

                        //Use the returned user ID to make a POST request that creates a new playlist in the userâ€™s account and returns a playlist ID.

                        return fetch(`/v1/users/${userId}/playlists/${playlistId}/tracks`, 
                        {
                                headers: headers,
                                method: 'POST',
                                body: JSON.stringify({ uris: trackURIs })
                        });
                    });
                });
    }

}

export default Spotify;